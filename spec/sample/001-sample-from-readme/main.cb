package main

// Requirements wrapped in <> come from the stdlib
//
// Additonally, the cube package contains a series of helpers
// and extra wrappers, such as the base super Thing, some checks
// around errors, and so on.
//
// This functionality exists in a separate package, rather than it being
// included for free, to allow for custom implementations/ cuts where
// binary size is an issue
require <cube>
require <errors>
require <fmt>
require <system>

// Otherwise, requirements are paths and are read, in order, from:
//    1. The local directory
//    2. The '.dist/src' directory
require "some/directory"

// A thing (or anything, really) started with a capital letter
// will be exported; in much the same way as in go.
thing Cube {
    // Super will set the superthing that functions in this thing overwrite.
    //
    // The basic cube.Thing superthing contains an init() function that always
    // returns no error, and some helpful metafunctions for checking variables
    // and so on
    super cube.Thing

    // Any exported var in a thing can be set as a named parameter, when
    // the thing is instantiated, so in this case: Cube.New(Name: "Bart Simpson")
    //
    // The initial value of a var defined in this was acts as the default, for when
    // vars are unset
    var Name string = "default"

    // A var without a default will start as null. In this case, the init function
    // (see below) is the place to check whether set, and to return errors when not
    var Age integer

    // Internals are values which have a getter, but no setter. They're
    // set in functions, often in the init function.
    internal Greeting string

    // An init function is run when a thing is instantiated. The order is:
    //   1. A thing is instantiated with named parameters
    //   2. The init() function is called
    //   3. Cube returns an object and an error
    //
    // The init function is expected to return an error/ null- the super
    // init function, for instance, returns null
    f init() -> (error) {
        // Greeting is scoped to this instance of this thing
        Greeting = fmt.Sprintf("Hello, %s!", Name)

        return null
    }

    // SayHello returns a string and an error. This is a good convention,
    // but realistically not everything needs to error.
    f SayHello() -> (string, error) {
        return Greeting, null
    }

    f CheckAdult() -> (error) {
        if Age < 18 {
            return errors.Invalid(fmt.Sprintf("age %d is too young to be an adult", Age))
        }

        return null
    }
}

// The entrypoint of an application is main.main
// This entryopint is expected to return an exit status.
f main() -> (int) {
    // New takes named params built from declared vars in a Thing
    var c Cube
    c, err = Cube.New(Name: "James", Age: 32)
    if err != null {
        // system.Panic prints an error message, a stack trace, and
        // returns -255 - the exit status signifying a shitshow of
        // a core dump
        system.Panic(err)
    }

    // A variable, not prefixed with 'var', has no guarantees on type safety
    // or that a later assignment wont replace the value with something of a
    // different type. Bloody fast, though.
    //
    // Additionally, wrapping in cube.Must will take functions of return signature
    // `(somevalue, error)`, returning 'somevalue' or panicking if error is not Null
    greeting = cube.Must(c.SayHello())
    fmt.Println(greeting)

    // cube.Validate takes a function which accepts solely an error and either
    // panics or does nothing, based on whether there's an error or not
    cube.Validate(c.CheckAdult())

    // System contains some helper exit statuses in order to set some sensible
    // statuses
    return system.OK
}
